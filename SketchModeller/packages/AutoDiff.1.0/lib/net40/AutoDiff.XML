<?xml version="1.0"?>
<doc>
  <assembly>
    <name>AutoDiff</name>
  </assembly>
  <members>
    <member name="T:AutoDiff.Sum">
      <summary>
            Represents a sum of at least two terms.
            </summary>
    </member>
    <member name="T:AutoDiff.Term">
      <summary>
            Base class for all automatically-differentiable terms.
            </summary>
    </member>
    <member name="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires>visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>The result from the visitor's visit function.</returns>
      <requires>visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Term.op_Implicit(System.Double)~AutoDiff.Term">
      <summary>
            Converts a floating point constant to a constant term.
            </summary>
      <param name="value">The floating point constnat</param>
      <returns>The resulting term.</returns>
    </member>
    <member name="M:AutoDiff.Term.op_Addition(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a sum of the two given terms.
            </summary>
      <param name="left">First term in the sum</param>
      <param name="right">Second term in the sum</param>
      <returns>A term representing the sum of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:AutoDiff.Term.op_Multiply(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a product term of the two given terms.
            </summary>
      <param name="left">The first term in the product</param>
      <param name="right">The second term in the product</param>
      <returns>A term representing the product of <paramref name="left" /> and <paramref name="right" />.</returns>
    </member>
    <member name="M:AutoDiff.Term.op_Division(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a fraction term of the two given terms.
            </summary>
      <param name="numerator">The numerator of the fraction. That is, the "top" part.</param>
      <param name="denominator">The denominator of the fraction. That is, the "bottom" part.</param>
      <returns>A term representing the fraction <paramref name="numerator" /> over <paramref name="denominator" />.</returns>
    </member>
    <member name="M:AutoDiff.Term.op_Subtraction(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a difference of the two given terms.
            </summary>
      <param name="left">The first term in the difference</param>
      <param name="right">The second term in the difference.</param>
      <returns>A term representing <paramref name="left" /> - <paramref name="right" />.</returns>
    </member>
    <member name="M:AutoDiff.Term.op_UnaryNegation(AutoDiff.Term)">
      <summary>
            Constructs a negated term
            </summary>
      <param name="term">The term to negate</param>
      <returns>A term representing <c>-term</c>.</returns>
    </member>
    <member name="M:AutoDiff.Sum.#ctor(AutoDiff.Term,AutoDiff.Term,AutoDiff.Term[])">
      <summary>
            Constructs an instance of the <see cref="T:AutoDiff.Sum" /> class.
            </summary>
      <param name="first">The first term in the sum</param>
      <param name="second">The second term in the sum</param>
      <param name="rest">The rest of the terms in the sum.</param>
    </member>
    <member name="M:AutoDiff.Sum.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept.</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Sum.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.Sum.Terms">
      <summary>
            Gets the terms of this sum.
            </summary>
    </member>
    <member name="T:AutoDiff.BinaryFunc">
      <summary>
            Represents a custom binary function term. The user provides custom delegates
            to evaluate and compute the gradient of the function.
            </summary>
    </member>
    <member name="M:AutoDiff.BinaryFunc.#ctor(System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Tuple{System.Double,System.Double}},AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Initializes a new instance of the <see cref="T:AutoDiff.BinaryFunc" /> class.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <param name="left">The left argument term for the binary function.</param>
      <param name="right">The right argument term for the binary function.</param>
      <requires>eval != null</requires>
      <requires>diff != null</requires>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <ensures>Eval == eval</ensures>
      <ensures>Diff == diff</ensures>
      <ensures>Left == left</ensures>
      <ensures>Right == right</ensures>
    </member>
    <member name="M:AutoDiff.BinaryFunc.Factory(System.Func{System.Double,System.Double,System.Double},System.Func{System.Double,System.Double,System.Tuple{System.Double,System.Double}})">
      <summary>
            Constructs a factory delegate that creates similary binary functions for different terms.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <returns>The described factory delegate</returns>
      <requires>eval != null</requires>
      <requires>diff != null</requires>
      <ensures>Contract.Result &lt; Func&lt;Term, Term, BinaryFunc&gt;&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.BinaryFunc.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.BinaryFunc.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>The result from the visitor's visit function.</returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.BinaryFunc.Eval">
      <summary>
            Gets the evaluation delegate
            </summary>
    </member>
    <member name="P:AutoDiff.BinaryFunc.Diff">
      <summary>
            Gets the differentiation delegate
            </summary>
    </member>
    <member name="P:AutoDiff.BinaryFunc.Left">
      <summary>
            Gets the function's left argument term
            </summary>
    </member>
    <member name="P:AutoDiff.BinaryFunc.Right">
      <summary>
            Gets the function's right argument term
            </summary>
    </member>
    <member name="T:AutoDiff.TermBuilder">
      <summary>
            A collection of static methods to build new terms
            </summary>
    </member>
    <member name="M:AutoDiff.TermBuilder.Constant(System.Double)">
      <summary>
            Builds a new constant term.
            </summary>
      <param name="value">The constant value</param>
      <returns>The constant term.</returns>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Sum(System.Collections.Generic.IEnumerable{AutoDiff.Term})">
      <summary>
            Builds a sum of given terms.
            </summary>
      <param name="terms">The collection of terms in the sum.</param>
      <returns>A term representing the sum of the terms in <paramref name="terms" />.</returns>
      <requires>terms.Where(term =&gt; !(term is Zero)).Count() &gt;= 2</requires>
      <requires>Contract.ForAll(terms, term =&gt; term != null)</requires>
      <ensures>Contract.Result&lt;Sum&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Sum(AutoDiff.Term,AutoDiff.Term,AutoDiff.Term[])">
      <summary>
            Builds a sum of given terms.
            </summary>
      <param name="v1">The first term in the sum</param>
      <param name="v2">The second term in the sum</param>
      <param name="rest">The rest of the terms in the sum.</param>
      <returns>A term representing the sum of <paramref name="v1" />, <paramref name="v2" /> and the terms in <paramref name="rest" />.</returns>
      <requires>v1 != null</requires>
      <requires>v2 != null</requires>
      <requires>Contract.ForAll(rest, term =&gt; term != null)</requires>
      <ensures>Contract.Result&lt;Sum&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Product(AutoDiff.Term,AutoDiff.Term,AutoDiff.Term[])">
      <summary>
            Builds a product of given terms.
            </summary>
      <param name="v1">The first term in the product</param>
      <param name="v2">The second term in the product</param>
      <param name="rest">The rest of the terms in the product</param>
      <returns>A term representing the product of <paramref name="v1" />, <paramref name="v2" /> and the terms in <paramref name="rest" />.</returns>
      <requires>v1 != null</requires>
      <requires>v2 != null</requires>
      <requires>Contract.ForAll(rest, term =&gt; term != null)</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Power(AutoDiff.Term,System.Double)">
      <summary>
            Builds a power terms given a base and a constant exponent
            </summary>
      <param name="t">The power base term</param>
      <param name="power">The exponent</param>
      <returns>A term representing <c>t^power</c>.</returns>
      <requires>t != null</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Power(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Builds a power term given a base term and an exponent term.
            </summary>
      <param name="baseTerm">The base term</param>
      <param name="exponent">The exponent term</param>
      <returns />
      <requires>baseTerm != null</requires>
      <requires>exponent != null</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Exp(AutoDiff.Term)">
      <summary>
            Builds a term representing the exponential function e^x.
            </summary>
      <param name="arg">The function's exponent</param>
      <returns>A term representing e^arg.</returns>
      <requires>arg != null</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.Log(AutoDiff.Term)">
      <summary>
            Builds a term representing the natural logarithm.
            </summary>
      <param name="arg">The natural logarithm's argument.</param>
      <returns>A term representing the natural logarithm of <paramref name="arg" /></returns>
      <requires>arg != null</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TermBuilder.QuadForm(AutoDiff.Term,AutoDiff.Term,AutoDiff.Term,AutoDiff.Term,AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a 2D quadratic form given the vector components x1, x2 and the matrix coefficients a11, a12, a21, a22.
            </summary>
      <param name="x1">First vector component</param>
      <param name="x2">Second vector component</param>
      <param name="a11">First row, first column matrix component</param>
      <param name="a12">First row, second column matrix component</param>
      <param name="a21">Second row, first column matrix component</param>
      <param name="a22">Second row, second column matrix component</param>
      <returns>A term describing the quadratic form</returns>
      <requires>x1 != null</requires>
      <requires>x2 != null</requires>
      <requires>a11 != null</requires>
      <requires>a12 != null</requires>
      <requires>a21 != null</requires>
      <requires>a22 != null</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="T:AutoDiff.Product">
      <summary>
            Represents a product between two terms.
            </summary>
    </member>
    <member name="M:AutoDiff.Product.#ctor(AutoDiff.Term,AutoDiff.Term)">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.Product" /> type.
            </summary>
      <param name="left">The first product term</param>
      <param name="right">The second product term</param>
    </member>
    <member name="M:AutoDiff.Product.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Product.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.Product.Left">
      <summary>
            Gets the first product term.
            </summary>
    </member>
    <member name="P:AutoDiff.Product.Right">
      <summary>
            Gets the second product term.
            </summary>
    </member>
    <member name="M:AutoDiff.TermPower.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor.
            </summary>
      <param name="visitor">The term visitor to accept.</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.TermPower.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.TermPower.Base">
      <summary>
            Gets the base term of the power function
            </summary>
    </member>
    <member name="P:AutoDiff.TermPower.Exponent">
      <summary>
            Gets the exponent term of the power function.
            </summary>
    </member>
    <member name="T:AutoDiff.CompiledDifferentiator">
      <summary>
            Compiles the terms tree to a more efficient form for differentiation.
            </summary>
    </member>
    <member name="T:AutoDiff.ICompiledTerm">
      <summary>
            Represents a term after it has been compiled for efficient evaluation/differentiation.
            </summary>
    </member>
    <member name="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])">
      <summary>
            Evaluates the compiled term at the given point.
            </summary>
      <param name="arg">The point at which to evaluate.</param>
      <returns>The value of the function represented by the term at the given point.</returns>
      <remarks>The number at <c>arg[i]</c> is the value assigned to the variable <c>Variables[i]</c>.</remarks>
      <requires>arg != null</requires>
      <requires>arg.Length == Variables.Count</requires>
    </member>
    <member name="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])">
      <summary>
            Computes the gradient of the compiled term at the given point.
            </summary>
      <param name="arg">The point at which to differentiate.</param>
      <returns>A tuple, where the first item is the gradient at <paramref name="arg" /> and the second item is 
            the value at <paramref name="arg" />. That is, the second value is the same as running <see cref="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])" /> on 
            <paramref name="arg" />.</returns>
      <remarks>The number at <c>arg[i]</c> is the value assigned to the variable <c>Variables[i]</c>.</remarks>
      <requires>arg != null</requires>
      <requires>arg.Length == Variables.Count</requires>
      <ensures>Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;() != null</ensures>
      <ensures>Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;().Item1.Length == arg.Length</ensures>
    </member>
    <member name="P:AutoDiff.ICompiledTerm.Variables">
      <summary>
            The collection of variables contained in this compiled term.
            </summary>
      <remarks>
            The order of variables in this collection specifies the meaning of each argument in <see cref="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" /> or
            <see cref="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])" />. That is, the variable at <c>Variables[i]</c> corresponds to the i-th parameter of <see cref="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" />
            and <see cref="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])" />.
            </remarks>
      <getter>
        <ensures>Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:AutoDiff.CompiledDifferentiator.#ctor(AutoDiff.Term,AutoDiff.Variable[])">
      <summary>
            Initializes a new instance of the <see cref="T:AutoDiff.CompiledDifferentiator" /> class.
            </summary>
      <param name="function">The function.</param>
      <param name="variables">The variables.</param>
      <requires>function != null</requires>
      <requires>variables != null</requires>
      <requires>Contract.ForAll(variables, variable =&gt; variable != null)</requires>
      <ensures>Dimension == variables.Length</ensures>
    </member>
    <member name="T:AutoDiff.ITermVisitor`1">
      <summary>
            A visitor for the terms that has a result from its computations
            </summary>
      <typeparam name="TResult">The type of the computation results</typeparam>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Constant)">
      <summary>
            Computes a value for a constant term.
            </summary>
      <param name="constant">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Zero)">
      <summary>
            Computes a value for a zero term.
            </summary>
      <param name="zero">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.ConstPower)">
      <summary>
            Computes a value for a power term.
            </summary>
      <param name="power">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.TermPower)">
      <summary>
            Computes a value for a power term.
            </summary>
      <param name="power">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Product)">
      <summary>
            Computes a value for a product term.
            </summary>
      <param name="product">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Sum)">
      <summary>
            Computes a value for a sum term.
            </summary>
      <param name="sum">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Variable)">
      <summary>
            Computes a value for a variable term.
            </summary>
      <param name="variable">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Log)">
      <summary>
            Computes a value for a logarithm term.
            </summary>
      <param name="log">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.Exp)">
      <summary>
            Computes a value for an exponential function term.
            </summary>
      <param name="exp">The input term.</param>
      <returns>The result of the computation.</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.UnaryFunc)">
      <summary>
            Computes a value for an unary function
            </summary>
      <param name="func">The unary function</param>
      <returns>The result of the computation</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.BinaryFunc)">
      <summary>
            Computes a value for a binary function
            </summary>
      <param name="func">The binary function</param>
      <returns>The result of the computation</returns>
    </member>
    <member name="M:AutoDiff.ITermVisitor`1.Visit(AutoDiff.NaryFunc)">
      <summary>
            Computes a value for a n-ary function
            </summary>
      <param name="func">The n-ary function</param>
      <returns>The result of the computation</returns>
    </member>
    <member name="T:AutoDiff.NaryFunc">
      <summary>
            Represents a custom n-ary function term. The user provides custom delegates
            to evaluate and compute the gradient of the function.
            </summary>
    </member>
    <member name="M:AutoDiff.NaryFunc.#ctor(System.Func{System.Double[],System.Double},System.Func{System.Double[],System.Double[]},System.Collections.Generic.IEnumerable{AutoDiff.Term})">
      <summary>
            Initializes a new instance of the <see cref="T:AutoDiff.NaryFunc" /> class.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <param name="terms">The argument terms for the n-ary function.</param>
    </member>
    <member name="M:AutoDiff.NaryFunc.Factory(System.Func{System.Double[],System.Double},System.Func{System.Double[],System.Double[]})">
      <summary>
            Constructs a factory delegate that creates similary n-ary functions for different terms.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <returns>The described factory delegate</returns>
      <requires>eval != null</requires>
      <requires>diff != null</requires>
      <ensures>Contract.Result&lt;Func&lt;IEnumerable&lt;Term&gt;, NaryFunc&gt;&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.NaryFunc.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.NaryFunc.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>The result from the visitor's visit function.</returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.NaryFunc.Eval">
      <summary>
            Gets the evaluation delegate
            </summary>
    </member>
    <member name="P:AutoDiff.NaryFunc.Diff">
      <summary>
            Gets the differentiation delegate
            </summary>
    </member>
    <member name="P:AutoDiff.NaryFunc.Terms">
      <summary>
            Gets the arguments of this function
            </summary>
    </member>
    <member name="T:AutoDiff.TVec">
      <summary>
            A column vector made of terms.
            </summary>
    </member>
    <member name="M:AutoDiff.TVec.#ctor(System.Collections.Generic.IEnumerable{AutoDiff.Term})">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.TVec" /> class given vector components.
            </summary>
      <param name="terms">The vector component terms</param>
      <requires>terms != null</requires>
      <requires>Contract.ForAll(terms, term =&gt; term != null)</requires>
      <requires>terms.Any()</requires>
    </member>
    <member name="M:AutoDiff.TVec.#ctor(AutoDiff.Term[])">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.TVec" /> class given vector components.
            </summary>
      <param name="terms">The vector component terms</param>
      <requires>terms != null</requires>
      <requires>Contract.ForAll(terms, term =&gt; term != null)</requires>
      <requires>terms.Length &gt; 0</requires>
    </member>
    <member name="M:AutoDiff.TVec.#ctor(AutoDiff.TVec,AutoDiff.Term[])">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.TVec" /> class using another vector's components.
            </summary>
      <param name="first">A vector containing the first vector components to use.</param>
      <param name="rest">More vector components to add in addition to the components in <paramref name="first" /></param>
      <requires>first != null</requires>
      <requires>Contract.ForAll(rest, term =&gt; term != null)</requires>
    </member>
    <member name="M:AutoDiff.TVec.GetTerms">
      <summary>
            Gets an array of all vector components.
            </summary>
      <returns>An array of all vector components. Users are free to modify this array. It doesn't point to any
            internal structures.</returns>
      <ensures>Contract.Result&lt;Term[]&gt;() != null</ensures>
      <ensures>Contract.Result&lt;Term[]&gt;().Length &gt; 0</ensures>
      <ensures>Contract.ForAll(Contract.Result&lt;Term[]&gt;(), term =&gt; term != null)</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_Addition(AutoDiff.TVec,AutoDiff.TVec)">
      <summary>
            Constructs a sum of two term vectors.
            </summary>
      <param name="left">The first vector in the sum</param>
      <param name="right">The second vector in the sum</param>
      <returns>A vector representing the sum of <paramref name="left" /> and <paramref name="right" /></returns>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <requires>left.Dimension == right.Dimension</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == left.Dimension</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_Subtraction(AutoDiff.TVec,AutoDiff.TVec)">
      <summary>
            Constructs a difference of two term vectors,
            </summary>
      <param name="left">The first vector in the difference</param>
      <param name="right">The second vector in the difference.</param>
      <returns>A vector representing the difference of <paramref name="left" /> and <paramref name="right" /></returns>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <requires>left.Dimension == right.Dimension</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == left.Dimension</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_UnaryNegation(AutoDiff.TVec)">
      <summary>
            Inverts a vector
            </summary>
      <param name="vector">The vector to invert</param>
      <returns>A vector repsesenting the inverse of <paramref name="vector" /></returns>
      <requires>vector != null</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == vector.Dimension</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_Multiply(AutoDiff.TVec,AutoDiff.Term)">
      <summary>
            Multiplies a vector by a scalar
            </summary>
      <param name="vector">The vector</param>
      <param name="scalar">The scalar</param>
      <returns>A product of the vector <paramref name="vector" /> and the scalar <paramref name="scalar" />.</returns>
      <requires>vector != null</requires>
      <requires>scalar != null</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == vector.Dimension</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_Multiply(AutoDiff.Term,AutoDiff.TVec)">
      <summary>
            Multiplies a vector by a scalar
            </summary>
      <param name="vector">The vector</param>
      <param name="scalar">The scalar</param>
      <returns>A product of the vector <paramref name="vector" /> and the scalar <paramref name="scalar" />.</returns>
      <requires>vector != null</requires>
      <requires>scalar != null</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == vector.Dimension</ensures>
    </member>
    <member name="M:AutoDiff.TVec.op_Multiply(AutoDiff.TVec,AutoDiff.TVec)">
      <summary>
            Constructs a term representing the inner product of two vectors.
            </summary>
      <param name="left">The first vector of the inner product</param>
      <param name="right">The second vector of the inner product</param>
      <returns>A term representing the inner product of <paramref name="left" /> and <paramref name="right" />.</returns>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <requires>left.Dimension == right.Dimension</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TVec.InnerProduct(AutoDiff.TVec,AutoDiff.TVec)">
      <summary>
            Constructs a term representing the inner product of two vectors.
            </summary>
      <param name="left">The first vector of the inner product</param>
      <param name="right">The second vector of the inner product</param>
      <returns>A term representing the inner product of <paramref name="left" /> and <paramref name="right" />.</returns>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <requires>left.Dimension == right.Dimension</requires>
      <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.TVec.CrossProduct(AutoDiff.TVec,AutoDiff.TVec)">
      <summary>
            Constructs a 3D cross-product vector given two 3D vectors.
            </summary>
      <param name="left">The left cross-product term</param>
      <param name="right">The right cross product term</param>
      <returns>A vector representing the cross product of <paramref name="left" /> and <paramref name="right" /></returns>
      <requires>left != null</requires>
      <requires>right != null</requires>
      <requires>left.Dimension == 3</requires>
      <requires>right.Dimension == 3</requires>
      <ensures>Contract.Result&lt;TVec&gt;().Dimension == 3</ensures>
    </member>
    <member name="P:AutoDiff.TVec.Item(System.Int32)">
      <summary>
            Gets a vector component given its zero-based index.
            </summary>
      <param name="index">The vector's component index.</param>
      <returns>The vector component.</returns>
      <getter>
        <requires>index &gt;= 0 &amp;&amp; index &lt; Dimension</requires>
        <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.TVec.NormSquared">
      <summary>
            Gets a term representing the squared norm of this vector.
            </summary>
      <getter>
        <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.TVec.Dimension">
      <summary>
            Gets the dimensions of this vector
            </summary>
      <getter>
        <ensures>Contract.Result&lt;int&gt;() &gt; 0</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.TVec.X">
      <summary>
            Gets the first vector component
            </summary>
      <getter>
        <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.TVec.Y">
      <summary>
            Gets the second vector component.
            </summary>
      <getter>
        <requires>Dimension &gt;= 2</requires>
        <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.TVec.Z">
      <summary>
            Gets the third vector component
            </summary>
      <getter>
        <requires>Dimension &gt;= 3</requires>
        <ensures>Contract.Result&lt;Term&gt;() != null</ensures>
      </getter>
    </member>
    <member name="T:AutoDiff.TermUtils">
      <summary>
            Static methods that operate on terms.
            </summary>
    </member>
    <member name="M:AutoDiff.TermUtils.Compile(AutoDiff.Term,AutoDiff.Variable[])">
      <summary>
            Creates a compiled representation of a given term that allows efficient evaluation of the value/gradient.
            </summary>
      <param name="term">The term to compile.</param>
      <param name="variables">The variables contained in the term.</param>
      <returns>A compiled representation of <paramref name="term" /> that assigns values to variables in the same order
            as in <paramref name="variables" /></returns>
      <remarks>
            The order of the variables in <paramref name="variables" /> is important. Each call to <c>ICompiledTerm.Evaluate</c> or 
            <c>ICompiledTerm.Differentiate</c> receives an array of numbers representing the point of evaluation. The i'th number in this array corresponds
            to the i'th variable in <c>variables</c>.
            </remarks>
      <requires>variables != null</requires>
      <requires>term != null</requires>
      <ensures>Contract.Result&lt;ICompiledTerm&gt;() != null</ensures>
      <ensures>Contract.Result&lt;ICompiledTerm&gt;().Variables.Count == variables.Length</ensures>
      <ensures>Contract.ForAll(0, variables.Length, i =&gt; variables[i] == Contract.Result&lt;ICompiledTerm&gt;().Variables[i])</ensures>
    </member>
    <member name="M:AutoDiff.TermUtils.Compile(AutoDiff.Term,AutoDiff.Variable[],AutoDiff.Variable[])">
      <summary>
            Creates a compiled representation of a given term that allows efficient evaluation of the value/gradient where part of the variables serve as function
            inputs and other variables serve as constant parameters.
            </summary>
      <param name="term">The term to compile.</param>
      <param name="variables">The variables contained in the term.</param>
      <param name="parameters">The constant parameters in the term.</param>
      <returns>A compiled representation of <paramref name="term" /> that assigns values to variables in the same order
            as in <paramref name="variables" /> and <paramref name="parameters" /></returns>
      <remarks>
            The order of the variables in <paramref name="variables" /> is important. Each call to <c>ICompiledTerm.Evaluate</c> or 
            <c>ICompiledTerm.Differentiate</c> receives an array of numbers representing the point of evaluation. The i'th number in this array corresponds
            to the i'th variable in <c>variables</c>.
            </remarks>
      <requires>variables != null</requires>
      <requires>parameters != null</requires>
      <requires>term != null</requires>
      <ensures>Contract.Result&lt;IParametricCompiledTerm&gt;() != null</ensures>
      <ensures>Contract.Result&lt;IParametricCompiledTerm&gt;().Variables.Count == variables.Length</ensures>
      <ensures>Contract.ForAll(0, variables.Length, i =&gt; variables[i] == Contract.Result&lt;IParametricCompiledTerm&gt;().Variables[i])</ensures>
      <ensures>Contract.Result&lt;IParametricCompiledTerm&gt;().Parameters.Count == parameters.Length</ensures>
      <ensures>Contract.ForAll(0, parameters.Length, i =&gt; parameters[i] == Contract.Result&lt;IParametricCompiledTerm&gt;().Parameters[i])</ensures>
    </member>
    <member name="M:AutoDiff.TermUtils.Evaluate(AutoDiff.Term,AutoDiff.Variable[],System.Double[])">
      <summary>
            Evaluates the function represented by a given term at a given point.
            </summary>
      <param name="term">The term representing the function to evaluate.</param>
      <param name="variables">The variables used in <paramref name="term" />.</param>
      <param name="point">The values assigned to the variables in <paramref name="variables" /></param>
      <returns>The value of the function represented by <paramref name="term" /> at the point represented by <paramref name="variables" />
            and <paramref name="point" />.</returns>
      <remarks>The i'th value in <c>point</c> corresponds to the i'th variable in <c>variables</c>.</remarks>
      <requires>term != null</requires>
      <requires>variables != null</requires>
      <requires>point != null</requires>
      <requires>variables.Length == point.Length</requires>
    </member>
    <member name="M:AutoDiff.TermUtils.Differentiate(AutoDiff.Term,AutoDiff.Variable[],System.Double[])">
      <summary>
            Computes the gradient of the function represented by a given term at a given point.
            </summary>
      <param name="term">The term representing the function to differentiate.</param>
      <param name="variables">The variables used in <paramref name="term" />.</param>
      <param name="point">The values assigned to the variables in <paramref name="variables" /></param>
      <returns>The gradient of the function represented by <paramref name="term" /> at the point represented by <paramref name="variables" />
            and <paramref name="point" />.</returns>
      <remarks>The i'th value in <c>point</c> corresponds to the i'th variable in <c>variables</c>. In addition, the i'th value
            in the resulting array is the partial derivative with respect to the i'th variable in <c>variables</c>.</remarks>
      <requires>term != null</requires>
      <requires>variables != null</requires>
      <requires>point != null</requires>
      <requires>variables.Length == point.Length</requires>
      <ensures>Contract.Result&lt;double[]&gt;() != null</ensures>
      <ensures>Contract.Result&lt;double[]&gt;().Length == variables.Length</ensures>
    </member>
    <member name="T:AutoDiff.IParametricCompiledTerm">
      <summary>
            Represents a parametric term after it has been compiled for efficient evaluation/differentiation. A parametric
            term has some variables that function as "constant parameters" and others that function as actual variables.
            </summary>
    </member>
    <member name="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])">
      <summary>
            Evaluates the compiled term at the given point.
            </summary>
      <param name="arg">The point at which to evaluate..</param>
      <param name="parameters">The parameter values</param>
      <returns>The value of the function represented by the term at the given point.</returns>
      <remarks>The number at <c>arg[i]</c> is the value assigned to the variable <c>Variables[i]</c>.</remarks>
      <requires>arg != null</requires>
      <requires>arg.Length == Variables.Count</requires>
      <requires>parameters != null</requires>
      <requires>parameters.Length == Parameters.Count</requires>
    </member>
    <member name="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])">
      <summary>
            Computes the gradient of the compiled term at the given point.
            </summary>
      <param name="arg">The point at which to differentiate.</param>
      <param name="parameters">The parameter values</param>
      <returns>A tuple, where the first item is the gradient at <paramref name="arg" /> and the second item is 
            the value at <paramref name="arg" />. That is, the second value is the same as running <see cref="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" /> on 
            <paramref name="arg" /> and <paramref name="parameters" />.</returns>
      <remarks>The number at <c>arg[i]</c> is the value assigned to the variable <c>Variables[i]</c>.</remarks>
      <requires>arg != null</requires>
      <requires>arg.Length == Variables.Count</requires>
      <requires>parameters != null</requires>
      <requires>parameters.Length == Parameters.Count</requires>
      <ensures>Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;() != null</ensures>
      <ensures>Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;().Item1.Length == arg.Length</ensures>
    </member>
    <member name="P:AutoDiff.IParametricCompiledTerm.Variables">
      <summary>
            The collection of variables contained in this compiled term.
            </summary>
      <remarks>
            The order of variables in this collection specifies the meaning of each argument in <see cref="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" /> or
            <see cref="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" />. That is, the variable at <c>Variables[i]</c> corresponds to the i-th element in the <c>arg</c> parameter of <see cref="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" />
            and <see cref="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" />.
            </remarks>
      <getter>
        <ensures>Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="P:AutoDiff.IParametricCompiledTerm.Parameters">
      <summary>
            The collection of parameter variables contained in this compiled term.
            </summary>
      <remarks>
            The order of variables in this collection specifies the meaning of each argument in <see cref="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" /> or
            <see cref="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" />. That is, the variable at <c>Variables[i]</c> corresponds to the i-th element in the <c>parameters</c> parameter of <see cref="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" />
            and <see cref="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" />.
            </remarks>
      <getter>
        <ensures>Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="T:AutoDiff.Log">
      <summary>
            Represents a natural logarithm function
            </summary>
    </member>
    <member name="M:AutoDiff.Log.#ctor(AutoDiff.Term)">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.Log" /> class.
            </summary>
      <param name="arg">The argument of the natural logarithm</param>
    </member>
    <member name="M:AutoDiff.Log.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a terms visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Log.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.Log.Arg">
      <summary>
            Gets the natural logarithm argument.
            </summary>
    </member>
    <member name="T:AutoDiff.Constant">
      <summary>
            A constant value term
            </summary>
    </member>
    <member name="M:AutoDiff.Constant.#ctor(System.Double)">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.Constant" /> class
            </summary>
      <param name="value">The value of the constant</param>
    </member>
    <member name="M:AutoDiff.Constant.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Constant.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.Constant.Value">
      <summary>
            Gets the value of this constant
            </summary>
    </member>
    <member name="T:AutoDiff.ConstPower">
      <summary>
            Represents a constant-power function x^n, where n is constant.
            </summary>
    </member>
    <member name="M:AutoDiff.ConstPower.#ctor(AutoDiff.Term,System.Double)">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.ConstPower" /> class.
            </summary>
      <param name="baseTerm">The base of the power function</param>
      <param name="exponent">The exponent of the power function</param>
    </member>
    <member name="M:AutoDiff.ConstPower.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor.
            </summary>
      <param name="visitor">The term visitor to accept.</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.ConstPower.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.ConstPower.Base">
      <summary>
            Gets the base term of the power function
            </summary>
    </member>
    <member name="P:AutoDiff.ConstPower.Exponent">
      <summary>
            Gets the exponent term of the power function.
            </summary>
    </member>
    <member name="T:AutoDiff.Variable">
      <summary>
            Represents a variable term. Variable terms are substituted for real values during evaluation and
            differentiation. 
            </summary>
    </member>
    <member name="M:AutoDiff.Variable.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept.</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Variable.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="T:AutoDiff.Zero">
      <summary>
            A constant zero term. Similar to <see cref="T:AutoDiff.Constant" /> but represents only the value 0.
            </summary>
    </member>
    <member name="M:AutoDiff.Zero.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept.</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Zero.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="T:AutoDiff.Exp">
      <summary>
            Represents the exponential function <c>e^x</c></summary>
    </member>
    <member name="M:AutoDiff.Exp.#ctor(AutoDiff.Term)">
      <summary>
            Constructs a new instance of the <see cref="T:AutoDiff.Exp" /> type.
            </summary>
      <param name="arg">The exponent of the function.</param>
    </member>
    <member name="M:AutoDiff.Exp.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.Exp.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.Exp.Arg">
      <summary>
            Gets the exponent term.
            </summary>
    </member>
    <member name="T:AutoDiff.UnaryFunc">
      <summary>
            Represents a custom unary function term. The user provides custom delegates
            to evaluate and compute the derivative (differentiate) the function.
            </summary>
    </member>
    <member name="M:AutoDiff.UnaryFunc.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},AutoDiff.Term)">
      <summary>
            Initializes a new instance of the <see cref="T:AutoDiff.UnaryFunc" /> class.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <param name="argument">The argument term for the unary function</param>
      <requires>eval != null</requires>
      <requires>diff != null</requires>
      <requires>argument != null</requires>
      <ensures>Eval == eval</ensures>
      <ensures>Diff == diff</ensures>
      <ensures>Argument == argument</ensures>
    </member>
    <member name="M:AutoDiff.UnaryFunc.Factory(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double})">
      <summary>
            Constructs a factory delegate that creates similar unary functions for different terms.
            </summary>
      <param name="eval">The evaluation method for the custom function.</param>
      <param name="diff">The differentiation method for the custom function.</param>
      <returns>The described factory delegate</returns>
      <requires>eval != null</requires>
      <requires>diff != null</requires>
      <ensures>Contract.Result&lt;Func&lt;Term, UnaryFunc&gt;&gt;() != null</ensures>
    </member>
    <member name="M:AutoDiff.UnaryFunc.Accept(AutoDiff.ITermVisitor)">
      <summary>
            Accepts a term visitor
            </summary>
      <param name="visitor">The term visitor to accept</param>
      <requires inheritedFrom="M:AutoDiff.Term.Accept(AutoDiff.ITermVisitor)" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="M:AutoDiff.UnaryFunc.Accept``1(AutoDiff.ITermVisitor{``0})">
      <summary>
            Accepts a term visitor with a generic result
            </summary>
      <typeparam name="TResult">The type of the result from the visitor's function</typeparam>
      <param name="visitor">The visitor to accept</param>
      <returns>
            The result from the visitor's visit function.
            </returns>
      <requires inheritedFrom="M:AutoDiff.Term.Accept``1(AutoDiff.ITermVisitor{``0})" inheritedFromTypeName="Term">visitor != null</requires>
    </member>
    <member name="P:AutoDiff.UnaryFunc.Eval">
      <summary>
            Gets the evaluation delegate.
            </summary>
    </member>
    <member name="P:AutoDiff.UnaryFunc.Diff">
      <summary>
            Gets the differentiation delegate.
            </summary>
    </member>
    <member name="P:AutoDiff.UnaryFunc.Argument">
      <summary>
            Gets the function's argument term
            </summary>
    </member>
    <member name="T:AutoDiff.ITermVisitor">
      <summary>
            Visitor for terms that has no result from its computations.
            </summary>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Constant)">
      <summary>
            Performs an action for a constant term.
            </summary>
      <param name="constant">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Zero)">
      <summary>
            Performs an action for a zero term.
            </summary>
      <param name="zero">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.ConstPower)">
      <summary>
            Performs an action for a constant power term.
            </summary>
      <param name="power">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.TermPower)">
      <summary>
            Performs an action for a power term.
            </summary>
      <param name="power">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Product)">
      <summary>
            Performs an action for a product term.
            </summary>
      <param name="product">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Sum)">
      <summary>
            Performs an action for a sum term.
            </summary>
      <param name="sum">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Variable)">
      <summary>
            Performs an action for a variable term.
            </summary>
      <param name="variable">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Log)">
      <summary>
            Performs an action for a logarithm term.
            </summary>
      <param name="log">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.Exp)">
      <summary>
            Performs an action for an exponential function term.
            </summary>
      <param name="exp">The input term.</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.UnaryFunc)">
      <summary>
            Performs an action for an unary function.
            </summary>
      <param name="func">The unary function</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.BinaryFunc)">
      <summary>
            Performs an action for a binary function.
            </summary>
      <param name="func">The binary function</param>
    </member>
    <member name="M:AutoDiff.ITermVisitor.Visit(AutoDiff.NaryFunc)">
      <summary>
            Performs an action for a n-ary function.
            </summary>
      <param name="func">The n-ary function</param>
    </member>
    <member name="P:AutoDiff.ParametricCompiledTerm.Parameters">
      <getter>
        <ensures inheritedFrom="M:AutoDiff.IParametricCompiledTerm.get_Parameters" inheritedFromTypeName="IParametricCompiledTerm">Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:AutoDiff.ParametricCompiledTerm.Evaluate(System.Double[],System.Double[])">
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">arg != null</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">arg.Length == Variables.Count</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">parameters != null</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Evaluate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">parameters.Length == Parameters.Count</requires>
    </member>
    <member name="P:AutoDiff.ParametricCompiledTerm.Variables">
      <getter>
        <ensures inheritedFrom="M:AutoDiff.IParametricCompiledTerm.get_Variables" inheritedFromTypeName="IParametricCompiledTerm">Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
    <member name="M:AutoDiff.ParametricCompiledTerm.Differentiate(System.Double[],System.Double[])">
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">arg != null</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">arg.Length == Variables.Count</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">parameters != null</requires>
      <requires inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">parameters.Length == Parameters.Count</requires>
      <ensures inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;() != null</ensures>
      <ensures inheritedFrom="M:AutoDiff.IParametricCompiledTerm.Differentiate(System.Double[],System.Double[])" inheritedFromTypeName="IParametricCompiledTerm">Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;().Item1.Length == arg.Length</ensures>
    </member>
    <member name="M:AutoDiff.CompiledDifferentiator.Evaluate(System.Double[])">
      <requires>arg != null</requires>
      <requires>arg.Length == Dimension</requires>
      <requires inheritedFrom="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])" inheritedFromTypeName="ICompiledTerm">arg != null</requires>
      <requires inheritedFrom="M:AutoDiff.ICompiledTerm.Evaluate(System.Double[])" inheritedFromTypeName="ICompiledTerm">arg.Length == Variables.Count</requires>
    </member>
    <member name="M:AutoDiff.CompiledDifferentiator.Differentiate(System.Double[])">
      <requires>arg != null</requires>
      <requires>arg.Length == Dimension</requires>
      <requires inheritedFrom="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" inheritedFromTypeName="ICompiledTerm">arg != null</requires>
      <requires inheritedFrom="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" inheritedFromTypeName="ICompiledTerm">arg.Length == Variables.Count</requires>
      <ensures inheritedFrom="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" inheritedFromTypeName="ICompiledTerm">Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;() != null</ensures>
      <ensures inheritedFrom="M:AutoDiff.ICompiledTerm.Differentiate(System.Double[])" inheritedFromTypeName="ICompiledTerm">Contract.Result&lt;Tuple&lt;double[], double&gt;&gt;().Item1.Length == arg.Length</ensures>
    </member>
    <member name="P:AutoDiff.CompiledDifferentiator.Variables">
      <getter>
        <ensures inheritedFrom="M:AutoDiff.ICompiledTerm.get_Variables" inheritedFromTypeName="ICompiledTerm">Contract.Result&lt;ReadOnlyCollection&lt;Variable&gt;&gt;() != null</ensures>
      </getter>
    </member>
  </members>
</doc>